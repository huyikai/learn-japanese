---
import { getCollection } from 'astro:content';
import BaseLayout from '@layouts/BaseLayout.astro';
import TagItem from '@components/TagItem.astro';
const allWords = (await getCollection('words')).sort((a, b) => {
  const dateA = a.data.pubDate ? new Date(a.data.pubDate).getTime() : 0;
  const dateB = b.data.pubDate ? new Date(b.data.pubDate).getTime() : 0;
  return dateA - dateB;
});

const allGrammars = (await getCollection('grammars')).sort((a, b) => {
  const dateA = a.data.pubDate ? new Date(a.data.pubDate).getTime() : 0;
  const dateB = b.data.pubDate ? new Date(b.data.pubDate).getTime() : 0;
  return dateA - dateB;
});

const generateDateRange = (start: string, end: string) => {
  const startDate = new Date(start);
  const endDate = new Date(end);
  const dates = [];

  while (startDate <= endDate) {
    dates.push(startDate.toISOString().split('T')[0]);
    startDate.setDate(startDate.getDate() + 1);
  }

  return dates;
};

const dates = generateDateRange('2024-06-21', '2024-08-31');
---

<BaseLayout>
  {
    dates.map((date) => (
      <>
        <h2>日付：{date}</h2>
        <p>
          単語:
          {
            allWords.filter(
              (item) =>
                item.data.pubDate &&
                new Date(item.data.pubDate).toISOString().split('T')[0] === date
            ).length
          }
        </p>
        <div class="tags">
          {allWords
            .filter(
              (item) =>
                item.data.pubDate &&
                new Date(item.data.pubDate).toISOString().split('T')[0] === date
            )
            .map((item, index) => (
              <div {...{ key: index }}>
                <TagItem
                  title={item.data.title}
                  url={`words/${item.slug}`}
                />
              </div>
            ))}
        </div>
        <p>
          文法:
          {
            allGrammars.filter(
              (item) =>
                item.data.pubDate &&
                new Date(item.data.pubDate).toISOString().split('T')[0] === date
            ).length
          }
        </p>

        <div class="tags">
          {allGrammars
            .filter(
              (item) =>
                item.data.pubDate &&
                new Date(item.data.pubDate).toISOString().split('T')[0] === date
            )
            .map((item, index) => (
              <div {...{ key: index }}>
                <TagItem
                  title={item.data.title}
                  url={`grammars/${item.slug}`}
                />
              </div>
            ))}
        </div>
      </>
    ))
  }
</BaseLayout>
<style>
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
</style>
