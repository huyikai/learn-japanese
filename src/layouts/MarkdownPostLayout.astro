---
import BaseLayout from './BaseLayout.astro';
import { slide } from 'astro:transitions';
import Tag from '@components/Tag.astro';
import TagItem from '@components/TagItem.astro';
const { frontmatter } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;
---

<BaseLayout pageTitle={frontmatter.title}>
  {
    frontmatter.kana && (
      <p transition:animate={slide({ duration: '0.4s' })}>
        <strong>假名：</strong>
        {frontmatter.kana}
      </p>
    )
  }
  {
    frontmatter.pronunciation && (
      <p transition:animate={slide({ duration: '0.7s' })}>
        <strong>发音：</strong>
        {frontmatter.pronunciation}
      </p>
    )
  }
  {
    frontmatter.tone && (
      <p transition:animate={slide({ duration: '0.7s' })}>
        <strong>音调：</strong>
        <a
          href={`${baseUrl}/tone`}
          style="text-decoration: none;"
        >
          {frontmatter.tone}
        </a>
      </p>
    )
  }
  {
    frontmatter.type && (
      <p transition:animate={slide({ duration: '0.9s' })}>
        <strong>类型：</strong>
        {frontmatter.type}
      </p>
    )
  }

  {
    frontmatter.description && (
      <p transition:animate={slide({ duration: '1s' })}>
        <strong>释义：</strong>
        {typeof frontmatter.description === 'string' ? (
          <p transition:animate={slide({ duration: '1s' })}>
            {frontmatter.description}
          </p>
        ) : (
          frontmatter.description.map((description: any, index: number) => (
            <p transition:animate={slide({ duration: '1s' })}>{description}</p>
          ))
        )}
      </p>
    )
  }
  {
    frontmatter.example && (
      <p transition:animate={slide({ duration: '1.05s' })}>
        <strong>例句：</strong>
        <div transition:animate={slide({ duration: '1.1s' })}>
          {frontmatter.example.map((example: any, index: number) => (
            <p>
              {index + 1}. {example}
            </p>
          ))}
        </div>
      </p>
    )
  }

  {
    frontmatter.tags && (
      <Tag>
        {frontmatter.tags.map((tag: any) => (
          <TagItem
            title={tag}
            url={`/tags/${tag}`}
          />
        ))}
      </Tag>
    )
  }
  <slot />
</BaseLayout>
<style>
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
  }
  .tag {
    border-radius: 0.2em;
    padding: 0.2em 0.5em;
    font-size: 0.8em;
    background-color: var(--primary);
  }
  html.dark .tag {
    background-color: var(--primary);
  }

  .tag a {
    color: #fff;
    text-decoration: none;
  }
  html.dark .tag a {
    color: #fff;
  }
</style>
